# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  endCursor: String
  startCursor: String
}

interface Node {
  id: ID
}

type Todo implements Node {
  id: ID
  userId: ID!
  createdAt: String!
  text: String!
  complete: Boolean!
}

type TodoConnection {
  nextToken: String
  edges: [TodoEdge!]
  pageInfo: PageInfo!
}

type TodoEdge {
  node: Todo!
  cursor: String
}

input CreateTodoInput {
  text: String!
  clientMutationId: ID
}

type CreateTodoPayload {
  edge: TodoEdge
  clientMutationId: ID
  userId: ID!
}

input UpdateTodoInput {
  id: ID!
  complete: Boolean
  clientMutationId: ID
}

type UpdateTodoPayload {
  node: Todo
  clientMutationId: ID
  userId: ID!
}

input DeleteTodoInput {
  id: ID!
  clientMutationId: ID
}

type DeleteTodoPayload {
  deletedId: ID
  clientMutationId: ID
  userId: ID!
}

type Viewer implements Node {
  id: ID
  listTodos(after: String, first: Int): TodoConnection!
}

type Query {
  viewer: Viewer!
  # Per https://github.com/facebook/relay/issues/1653, this field is optional,
  # as it's up to the app developer to use. We won't use it in this example
  # but it would be easy to add if desired
  # node(id: ID!): Node
}

type Mutation {
  createTodo(input: CreateTodoInput!): CreateTodoPayload!
  updateTodo(input: UpdateTodoInput!): UpdateTodoPayload!
  deleteTodo(input: DeleteTodoInput!): DeleteTodoPayload!
}

type Subscription {
  createdTodo(userId: ID!): CreateTodoPayload
  @aws_subscribe(mutations: ["createTodo"])
  updatedTodo(userId: ID!): UpdateTodoPayload
  @aws_subscribe(mutations: ["updateTodo"])
  deletedTodo(userId: ID!): DeleteTodoPayload
  @aws_subscribe(mutations: ["deleteTodo"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
