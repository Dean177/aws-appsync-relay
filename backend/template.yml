---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Metadata:
  ResolverTemplates:
    - &EmptyRequest |
        {
          "version": "2017-02-28",
          "payload": {}
        }
    - &ViewerResponse |
        {"id": "$context.identity.sub"}
    - &ListRequest |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "userId = :u",
            "expressionValues": {
              ":u": {"S": "$context.identity.sub"}
            }
          },
          "index": "CreatedAtIndex",
          "nextToken": #if($context.args.after) "$context.args.after" #else null #end,
          "limit": #if($context.args.first) $context.args.first #else 10 #end,
          "scanIndexForward": false,
          "consistentRead": false,
          "select": "ALL_ATTRIBUTES"
        }
    - &ListResponse |
        #set($edges = [])
        #foreach($item in $context.result.items)
        ## Omitting the cursor field on EdgeType is a bit of a departure
        ## from the Relay spec, but AppSync DynamoDB resolver mappings
        ## deal strictly in opaque, page-level pagination tokens.
        ## As of Relay 1.6.0, the cursor field on EdgeType is not used internally,
        ## and the only consequence of this field missing is that the optional cursor
        ## argument to `ConnectionHandler.inserteEdgeBefore/After` will have no effect.
        $util.qr($edges.add({"node": $item, "cursor": null}))
        #end
        {
          "edges": $util.toJson($edges),
          "pageInfo": {
            "hasPreviousPage": false,
            "hasNextPage": #if($context.result.nextToken) true #else false #end,
            "endCursor": #if($context.result.nextToken) "$context.result.nextToken" #else null #end
          }
        }
    - &CreateRequest |
        #set($input = $context.args.input)
        #set($input.createdAt = $util.time.nowISO8601())
        #set($input.complete = false)
        #set($input.userId = "$context.identity.sub")
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
              "id": $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues": $util.dynamodb.toMapValuesJson($input)
        }
    - &CreateResponse |
        ## Need to include `userId` as a top-level field for authorization
        {
          "edge": {
            "node": $util.toJson($context.result)
          },
          "clientMutationId": "$context.arguments.input.clientMutationId",
          "userId": "$context.identity.sub"
        }
    - &UpdateRequest |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($context.args.input.id),
          },
          "update": {
           "expression": "SET complete = :c",
           "expressionValues": {
                  ":c": $util.dynamodb.toDynamoDBJson($context.args.input.complete)
              }
          },
          "condition": {
            "expression": "userId = :sub",
            "expressionValues": {
                ":sub": { "S": "$context.identity.sub" }
            }
          }
        }
    - &UpdateResponse |
        ## Need to include `userId` as a top-level field for authorization
        {
          "node": $util.toJson($context.result),
          "clientMutationId": "$context.arguments.input.clientMutationId",
          "userId": "$context.identity.sub"
        }
    - &DeleteRequest |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($context.args.input.id),
          },
          "condition": {
            "expression": "userId = :sub",
            "expressionValues": {
                ":sub": { "S": "$context.identity.sub" }
            }
          }
        }
    - &DeleteResponse |
        ## Need to include `userId` as a top-level field for authorization
        {
          "deletedId": "$context.result.id",
          "clientMutationId": "$context.arguments.input.clientMutationId",
          "userId": "$context.identity.sub"
        }
    - &SubscriptionResponse |
        #if($context.identity.sub != $context.arguments.userId)
            $utils.unauthorized()
        #else
        ##User is authorized, but we return null to continue
            null
        #end
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${AWS::StackName}_user_pool
  Client:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
  AppsyncLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}_appsync_log_role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - appsync.amazonaws.com
      Policies:
      - PolicyName: !Sub ${AWS::StackName}_appsync_log_policy
        PolicyDocument:
          Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - arn:aws:logs:*:*:*
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}_api
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppsyncLogRole.Arn
        FieldLogLevel: ALL
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      DefinitionS3Location: schema.graphql
      ApiId: !GetAtt GraphQLApi.ApiId
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}_table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}_datasource_role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - appsync.amazonaws.com
      Policies:
      - PolicyName: !Sub ${AWS::StackName}_datasource_policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Effect: Allow
            Resource:
            - !GetAtt Table.Arn
            - !Sub ${Table.Arn}/*
  DynamoSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Sub ${AWS::StackName}_dynamo_datasource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      ApiId: !GetAtt GraphQLApi.ApiId
      DynamoDBConfig:
        TableName: !Ref Table
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
  LocalSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Sub ${AWS::StackName}_local_datasource
      Type: NONE
      ApiId: !GetAtt GraphQLApi.ApiId
  ViewerResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: viewer
      DataSourceName: !GetAtt LocalSource.Name
      RequestMappingTemplate: *EmptyRequest
      ResponseMappingTemplate: *ViewerResponse
  ListTodosResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Viewer
      FieldName: listTodos
      DataSourceName: !GetAtt DynamoSource.Name
      RequestMappingTemplate: *ListRequest
      ResponseMappingTemplate: *ListResponse
  CreateTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: createTodo
      DataSourceName: !GetAtt DynamoSource.Name
      RequestMappingTemplate: *CreateRequest
      ResponseMappingTemplate: *CreateResponse
  UpdateTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateTodo
      DataSourceName: !GetAtt DynamoSource.Name
      RequestMappingTemplate: *UpdateRequest
      ResponseMappingTemplate: *UpdateResponse
  DeleteTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deleteTodo
      DataSourceName: !GetAtt DynamoSource.Name
      RequestMappingTemplate: *DeleteRequest
      ResponseMappingTemplate: *DeleteResponse
  CreatedResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Subscription
      FieldName: createdTodo
      DataSourceName: !GetAtt LocalSource.Name
      RequestMappingTemplate: *EmptyRequest
      ResponseMappingTemplate: *SubscriptionResponse
  UpdatedResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Subscription
      FieldName: updatedTodo
      DataSourceName: !GetAtt LocalSource.Name
      RequestMappingTemplate: *EmptyRequest
      ResponseMappingTemplate: *SubscriptionResponse
  DeletedResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Subscription
      FieldName: deletedTodo
      DataSourceName: !GetAtt LocalSource.Name
      RequestMappingTemplate: *EmptyRequest
      ResponseMappingTemplate: *SubscriptionResponse
Outputs:
  AppSyncEndpoint:
    Value: !GetAtt GraphQLApi.GraphQLUrl
  AppSyncRegion:
    Value: !Ref AWS::Region
  UserPool:
    Value: !Ref UserPool
  ClientId:
    Value: !Ref Client
