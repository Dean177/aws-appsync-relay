---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  AppsyncLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}_appsync_log_role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - appsync.amazonaws.com
      Policies:
      - PolicyName: !Sub ${AWS::StackName}_appsync_log_policy
        PolicyDocument:
          Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - arn:aws:logs:*:*:*
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}_api
      AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppsyncLogRole.Arn
        FieldLogLevel: ALL
  GraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      DefinitionS3Location: {{schema.graphql}}
      ApiId: !GetAtt GraphQLApi.ApiId
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}_table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}_datasource_role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - appsync.amazonaws.com
      Policies:
      - PolicyName: !Sub ${AWS::StackName}_datasource_policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Effect: Allow
            Resource:
            - !GetAtt Table.Arn
            - !Sub ${Table.Arn}/*
  DynamoSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Sub ${AWS::StackName}_dynamo_datasource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      ApiId: !GetAtt GraphQLApi.ApiId
      DynamoDBConfig:
        TableName: !Ref Table
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false
  LocalSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Sub ${AWS::StackName}_local_datasource
      Type: NONE
      ApiId: !GetAtt GraphQLApi.ApiId
  ViewerResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: viewer
      DataSourceName: !GetAtt LocalSource.Name
      RequestMappingTemplateS3Location: {{Empty.request.mapping}}
      ResponseMappingTemplate: '{"id": "0"}'
  ListTodosResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Viewer
      FieldName: listTodos
      DataSourceName: !GetAtt DynamoSource.Name
      RequestMappingTemplateS3Location: {{Viewer.listTodos.request.mapping}}
      ResponseMappingTemplateS3Location: {{Connection.response.mapping}}
  CreateTodoResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: createTodo
      DataSourceName: !GetAtt DynamoSource.Name
      RequestMappingTemplateS3Location: {{Create.request.mapping}}
      ResponseMappingTemplateS3Location: {{Create.response.mapping}}
  HttpEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: {{handler.zip}}
      Environment:
        Variables:
          APPSYNC_CONFIG: !Sub |

            {
              "Endpoint": "${GraphQLApi.GraphQLUrl}",
              "Key": "${GraphQLApiKey.ApiKey}",
              "Region": "${AWS::Region}"
            }

          BUNDLE_URL: {{bundle.js}}
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
Outputs:
  Endpoint:
    Value: !GetAtt GraphQLApi.GraphQLUrl
  Key:
    Value: !GetAtt GraphQLApiKey.ApiKey
  Region:
    Value: !Ref AWS::Region
